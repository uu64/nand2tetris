// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int height, width, addressOffset;
    static boolean color; 
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, j;

        let height = 256;
        let width = 512;
        let addressOffset = 16384;
        do Screen.clearScreen();
        do Screen.setColor(true);

        let i = 0;
        let j = 1;
        let twoToThe = Array.new(16);
        while (i < 16) {
            let twoToThe[i] = j;
            let i = i + 1;
            let j = j + j;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var Array memory;
        var int i;
        let memory = 0;
        let i = addressOffset;

        while (i < 24576) {
            let memory[i] = 0;
            let i = i + 1;
        }
        return;
        
        // var int i, j;
        // let i = 0;
        // while (i < height) {
        //     let j = 0;
        //     while (j < width) {
        //         do Memory.poke(i+j+addressOffset, 0);
        //         let j = j + 16;
        //     }
        //     let i = i + 1;
        // }
        // return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int v, address, bitnum;

        let bitnum = x;
        while (~(bitnum < 16)) {
            let bitnum = bitnum - 16;
        }

        let address = (y*32) + (x/16) + addressOffset;
        let v = Memory.peek(address);
        if (color) {
            do Memory.poke(address, v | twoToThe[bitnum]);
        } else {
            do Memory.poke(address, v & ~(twoToThe[bitnum]));
        }

        return;
    }

    function void batchDrawLine(int x1, int x2, int y) {
        var int tmp, v, address, bitnumX1, bitnumX2, startX1, startX2, row, col, bitnum;

        let row = y*32;
        let startX1 = Math.min(x1, x2)/16;
        let bitnumX1 = Math.min(x1, x2) - (16*startX1);
        let startX2 = Math.max(x1, x2)/16;
        let bitnumX2 = Math.max(x1, x2) - (16*startX2);

        if (startX1 = startX2) {
            let address = row + startX1 + addressOffset;
            let tmp = Memory.peek(address);

            let v = ~(twoToThe[bitnumX1] - 1) & twoToThe[bitnumX2 + 1] - 1;
            if (color) {
                do Memory.poke(address, tmp | v);
            } else {
                do Memory.poke(address, tmp & ~v);
            }
        } else{
            if (~(bitnumX1 = 0)) {
                let address = row + startX1 + addressOffset;
                let tmp = Memory.peek(address);
                let v = ~(twoToThe[bitnumX1] - 1);
                if (color) {
                    do Memory.poke(address, tmp | v);
                } else {
                    do Memory.poke(address, tmp & ~v);
                }
                let startX1 = startX1 + 1;
            }

            if (~(bitnumX2 = 15)) {
                let address = row + startX2 + addressOffset;
                let tmp = Memory.peek(address);
                let v = twoToThe[bitnumX2 + 1] - 1;
                if (color) {
                    do Memory.poke(address, tmp | v);
                } else {
                    do Memory.poke(address, tmp & ~v);
                }
                let startX2 = startX2 - 1;
            }

            let col = startX1;
            while (col < (startX2 + 1)) {
                let address = row + col + addressOffset;
                let v = -1;
                if (color) {
                    do Memory.poke(address, v);
                } else{
                    do Memory.poke(address, ~v);
                }
                let col = col + 1;
            }
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx;
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let adyMinusbdx = 0;

        if ((dy = 0) & (Math.abs(dx) > 15)) {
            do Screen.batchDrawLine(x1, x2, y1);
            return;
        }

        while ((Math.abs(a) < (Math.abs(dx)+1)) & (Math.abs(b) < (Math.abs(dy)+1))) {
            do Screen.drawPixel(x1+a, y1+b);
            if ((dy = 0) | (adyMinusbdx < 0)) {
            // if (~(dx = 0) & (Math.abs(a)*Math.abs(dy) < (Math.abs(b)*Math.abs(dx)+1))) {
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
                let adyMinusbdx = adyMinusbdx + Math.abs(dy);
            } else {
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
                let adyMinusbdx = adyMinusbdx - Math.abs(dx);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (y < (y2+1)) {
            // do Screen.drawLine(x1, y, x2, y);
            do Screen.batchDrawLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, squareR, startX, endX, startY, endY, tmp;

        let i = -r;
        let squareR = r*r;
        while (i < (r+1)) {
            let tmp = Math.sqrt(squareR-(i*i));
            let startX = x - tmp;
            let startY = y + i;
            let endX = x + tmp;
            let endY = y + i;
            do Screen.drawLine(startX, startY, endX, endY);
            let i = i + 1;
        }
        return;
    }
}
