// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int baseAddr, heapMin, heapMax;

    /** Initializes the class. */
    function void init() {
        var Array memory;
        let heapMin = 2048;
        let heapMax = 16383;

        let baseAddr = heapMin;
        do Memory.poke(baseAddr, heapMax - heapMin + 1); 
        do Memory.poke(baseAddr + 1, 0); 
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prev, next, retAddr, blockSize, required;
        if (size < 0) {
            do Sys.error(5);
        }
        let required = size + 1;

        let next = baseAddr;
        while (~(next = 0)) {
            if (next > heapMax) {
                do Sys.error(6);
            }

            let blockSize = Memory.peek(next);
            if ((blockSize - required) > -1) {
                do Memory.poke(next, required);
                let retAddr = next + 1;

                // update current block
                if (blockSize = required) {
                    if (prev = 0) {
                        let baseAddr = Memory.peek(next + 1);
                    } else {
                        do Memory.poke(prev + 1, Memory.peek(next + 1));
                    }
                } else {
                    let next = next + required;
                    if (prev = 0) {
                        let baseAddr = next;
                    } else {
                        do Memory.poke(prev + 1, next);
                    }
                    do Memory.poke(next, blockSize - required);
                    do Memory.poke(next + 1, Memory.peek(retAddr));
                }

                return retAddr;
            }
            let prev = next;
            let next = Memory.peek(next + 1);
        }

        do Sys.error(22);
        return -1;
    }

   /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int addr, size;
        let addr = o - 1;
        do Memory.poke(addr + 1, baseAddr);
        let baseAddr = addr;
        return;
    }    
}
