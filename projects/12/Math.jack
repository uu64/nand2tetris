// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, j;
        let i = 0;
        let j = 1;

        let twoToThe = Array.new(16);
        while (i < 16) {
            let twoToThe[i] = j;
            let i = i + 1;
            let j = j + j;
        }

        return;
    }

    function boolean bit(int x, int j) {
        return ~(x & twoToThe[j] = 0);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX, absY, result;

        if (y = 0) {
            do Sys.error(3);
        }

        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let result = Math.divideAbs(absX, absY);
        if ((x > 0 & y > 0)|(x < 0 & y < 0)) {
            return result;
        } else {
            return -result;
        }
    }

    function int divideAbs(int x, int y) {
        var int q, i, tmp;
        if (y > x) {
            return 0;
        }

        let q = Math.divideAbs(x, y + y);

        let i = 0;
        let tmp = 0;
        while (i < y) {
            let tmp = tmp + q;
            let i = i + 1;
        }
        if ((x - (tmp + tmp)) < y) {
            return q + q;
        }
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, tmp;
        let y = 0;
        // 0 <= x < 2^(15/2)
        let j = 7; // 15/2

        if (x < 0) {
            do Sys.error(4);
        }

        while (j > -1) {
            let tmp = Math.multiply(y + twoToThe[j], y + twoToThe[j]);
            if (~(tmp > x) & (tmp > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        return a;
    }
}
