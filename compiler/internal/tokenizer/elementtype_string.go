// Code generated by "stringer -type=ElementType -linecomment"; DO NOT EDIT.

package tokenizer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ElToken-0]
	_ = x[ElClass-1]
	_ = x[ElClassVarDec-2]
	_ = x[ElType-3]
	_ = x[ElSubroutineDec-4]
	_ = x[ElParameterList-5]
	_ = x[ElSubroutineBody-6]
	_ = x[ElVarDec-7]
	_ = x[ElClassName-8]
	_ = x[ElSubroutineName-9]
	_ = x[ElVarName-10]
	_ = x[ElStatements-11]
	_ = x[ElStatement-12]
	_ = x[ElLetStatement-13]
	_ = x[ElIfStatement-14]
	_ = x[ElWhileStatement-15]
	_ = x[ElDoStatement-16]
	_ = x[ElReturnStatement-17]
	_ = x[ElExpression-18]
	_ = x[ElTerm-19]
	_ = x[ElSubroutineCall-20]
	_ = x[ElExpressionList-21]
	_ = x[ElOp-22]
	_ = x[ElUnaryOp-23]
	_ = x[ElKeywordConstant-24]
}

const _ElementType_name = "tokenclassclassVarDectypesubroutineDecparameterListsubroutineBodyvarDecclassNamesubroutineNamevarNamestatementsstatementletStatementifStatementwhileStatementdoStatementreturnStatementexpressiontermsubroutineCallexpressionListopunaryOpkeywordConstant"

var _ElementType_index = [...]uint8{0, 5, 10, 21, 25, 38, 51, 65, 71, 80, 94, 101, 111, 120, 132, 143, 157, 168, 183, 193, 197, 211, 225, 227, 234, 249}

func (i ElementType) String() string {
	if i < 0 || i >= ElementType(len(_ElementType_index)-1) {
		return "ElementType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ElementType_name[_ElementType_index[i]:_ElementType_index[i+1]]
}
