class Snake {
    field int nodeSize;
    // 0: up, 1: down, 2: left, 3: right
    field int direction;

    field SnakeNode head, tail;

    constructor Snake new(int headX, int headY, int initLen) {
        var int i;
        var SnakeNode n;

        let nodeSize = 12;
        let direction = 3;

        let head = SnakeNode.new(-1, -1, null, null, direction, nodeSize);
        let tail = SnakeNode.new(-1, -1, null, null, direction, nodeSize);
        let n = SnakeNode.new(headX, headY, null, null, direction, nodeSize);
        do head.setNext(n);
        do tail.setPrev(n);
        do n.show();

        let i = 0;
        while (i < initLen) {
            do addTail();
            let i = i + 1;
        }

        return this;
    }

    method void addHead() {
        var SnakeNode first, added;
        var int headX, headY, x, y;

        let first = head.getNext();
        let headX = first.getX();
        let headY = first.getY();

        // up
        if (direction = 0) {
            let x = headX;
            let y = headY - nodeSize;
        }
        // down
        if (direction = 1) {
            let x = headX;
            let y = headY + nodeSize;
        }
        // left
        if (direction = 2) {
            let x = headX - nodeSize;
            let y = headY;
        }
        // right
        if (direction = 3) {
            let x = headX + nodeSize;
            let y = headY;
        }

        let added = SnakeNode.new(x, y, first, head, direction, nodeSize);

        do head.setNext(added);
        do first.setPrev(added);

        do added.show();

        return;
    }

    method void addTail() {
        var SnakeNode last, added;
        var int lastX, lastY, lastDirection, x, y;

        let last = tail.getPrev();
        let lastX = last.getX();
        let lastY = last.getY();
        let lastDirection = last.getDirection();

        // up
        if (lastDirection = 0) {
            let x = lastX;
            let y = lastY + nodeSize;
        }
        // down
        if (lastDirection = 1) {
            let x = lastX;
            let y = lastY - nodeSize;
        }
        // left
        if (lastDirection = 2) {
            let x = lastX + nodeSize;
            let y = lastY;
        }
        // right
        if (lastDirection = 3) {
            let x = lastX - nodeSize;
            let y = lastY;
        }

        let added = SnakeNode.new(x, y, tail, last, lastDirection, nodeSize);

        do last.setNext(added);
        do tail.setPrev(added);

        do added.show();

        return;
    }

    method void removeTail() {
        var SnakeNode removed, last;

        let removed = tail.getPrev();
        let last = removed.getPrev();

        do tail.setPrev(last);
        do last.setNext(tail);

        do removed.hide();
        do removed.dispose();

        return;
    }

    method void dispose() {
        var SnakeNode n;

        let n = head;
        while (~(n = null)) {
            do n.dispose();
            let n = n.getNext();
        }

        do Memory.deAlloc(this);
        return;
    }

    method SnakeNode getHead() {
        return head.getNext();
    }

    method SnakeNode getTail() {
        return tail.getPrev();
    }

    method int getDirection() {
        return direction;
    }

    method void setDirection(int d) {
        if ((direction = 0) | (direction = 1)) {
            if ((d = 0) | (d = 1)) {
                // do nothing
                return;
            }
        }

        if ((direction = 2) | (direction = 3)) {
            if ((d = 2) | (d = 3)) {
                // do nothing
                return;
            }
        }

        let direction = d;
        return;
    }

    method void draw() {
        var SnakeNode node;
        let node = head.getNext();
        while (~(node.getNext() = null)) {
            do node.show();
            let node = node.getNext();
        }
        return;
    }

    method void move() {
        var SnakeNode n;
        var int headX, headY;

        let n = head.getNext();
        let headX = n.getX();
        let headY = n.getY();

        // up
        if (direction = 0) {
            do addHead();
        }
        // down
        if (direction = 1) {
            do addHead();
        }
        // left
        if (direction = 2) {
            do addHead();
        }
        // right
        if (direction = 3) {
            do addHead();
        }

        do removeTail();

        return;
    }
}