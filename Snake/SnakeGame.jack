class SnakeGame {
    static SnakeGame instance;

    field Snake snake;
    field Feed feed;
    field Rand randW;
    field Rand randH;
    field int score;
    field int wait;
    field boolean exit;
    field int nodeSize, initX, initY;

    // field width = [0, 511]
    field int fieldWMin;
    field int fieldWMax;

    // field height = [0, 255]
    field int fieldHMin;
    field int fieldHMax;

    constructor SnakeGame new() {
        let exit = false;
        let nodeSize = 12;

        let wait = 500;

        // 367 = nodeSize * 30 + 7
        let fieldWMin = 7;
        let fieldWMax = 367;

        // 247 = nodeSize * 20 + 7
        let fieldHMin = 7;
        let fieldHMax = 247;

        do Screen.clearScreen();

        // init field
        do Screen.setColor(true);
        do Screen.drawRectangle(fieldWMin, fieldHMin, fieldWMax, fieldHMax);
        do Screen.setColor(false);
        do Screen.drawRectangle(fieldWMin+1, fieldHMin+1, fieldWMax-1, fieldHMax-1);

        // init snake
        // 127 = nodeSize * 10 + 7
        let snake = Snake.new(127, 127, 5);

        // init feed
        // 67 = nodeSize * 5 + 7
        let feed = Feed.new(67, 67);
        do feed.show();

        // init rand
        let randW = Rand.new(28, 20, 30, 2);
        let randH = Rand.new(1, 16, 20, 19);

        // init score
        let score = 0;
        do refreshScore();

        return this;
    }

    function void newInstance() {
        let instance = SnakeGame.new();
        return;
    }

    function SnakeGame getInstance() {
        return instance;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void refreshScore() {
        do Output.moveCursor(5, 48);
        do Output.printString("SCORE: ");
        do Output.moveCursor(5, 55);
        do Output.printInt(score);
        return;
    }

    method boolean isEating() {
        var int headX, headY, feedX, feedY;
        var SnakeNode head, n;

        let head = snake.getHead();
        let headX = head.getX();
        let headY = head.getY();

        let feedX = feed.getX();
        let feedY = feed.getY();

        if ((feedX = headX) & (feedY = headY)) {
            return true;
        }

        return false;
    }

    method boolean isGameOver() {
        var int d, headX, headY, nextX, nextY, x, y;
        var SnakeNode head, n;

        let d = snake.getDirection();
        let head = snake.getHead();

        // check if node will be inside the wall
        let headX = head.getX();
        let headY = head.getY();

        // up
        if (d = 0) {
            let nextX = headX;
            let nextY = headY - nodeSize;
            if (nextY < fieldHMin) {
                return true;
            }
        }
        // down
        if (d = 1) {
            let nextX = headX;
            let nextY = headY + nodeSize;
            if (nextY = fieldHMax) {
                return true;
            }
        }
        // left
        if (d = 2) {
            let nextX = headX - nodeSize;
            let nextY = headY;
            if (nextX < fieldWMin) {
                return true;
            }
        }
        // right
        if (d = 3) {
            let nextX = headX + nodeSize;
            let nextY = headY;
            if (nextX = fieldWMax) {
                return true;
            }
        }

        // check if node will be eating itself
        let n = head;
        while (~(n = null)) {
            let x = n.getX();
            let y = n.getY();
            if ((x = nextX) & (y = nextY)) {
                return true;
            }
            let n = n.getNext();
        }

        return false;
    }

    method void run() {
        var char key;
        var int rw, rh;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();

                if (isGameOver()) {
                    let exit = true;
                } else {
                    do snake.move();

                    if (isEating()) {
                        let score = score + 50;

                        do refreshScore();
                        do snake.addTail();

                        let rw = randW.get();
                        let rw = rw * nodeSize;
                        let rh = randH.get();
                        let rh = rh * nodeSize;
                        do feed.put(rw+7, rh+7);

                        if (wait > 100) {
                            let wait = wait - 50;
                        }
                    }
                }
                do Sys.wait(wait);
            }

            // Left Arrow = 130
            // Up Arrow = 131
            // Right Arrow = 132
            // Down Arrow = 133
            if (key = 131) {
                do snake.setDirection(0);
            }
            if (key = 133) {
                do snake.setDirection(1);
            }
            if (key = 130) {
                do snake.setDirection(2);
            }
            if (key = 132) {
                do snake.setDirection(3);
            }

            let key = 0;
        }


        if (exit) {
            do Output.moveCursor(10, 19);
            do Output.printString("Game Over");
        }

        return;
    }
}